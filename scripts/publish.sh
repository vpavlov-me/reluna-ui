#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Reluna UI Publishing Script${NC}"
echo "=================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ main –≤–µ—Ç–∫–µ
current_branch=$(git branch --show-current)
if [ "$current_branch" != "main" ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ main –≤–µ—Ç–∫–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏${NC}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
if [ -n "$(git status --porcelain)" ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è${NC}"
    git status
    exit 1
fi

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
current_version=$(node -p "require('./package.json').version")
echo -e "${BLUE}üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${current_version}${NC}"

# –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞
echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–ª–∏–∑–∞:${NC}"
echo "1) patch (0.1.0 -> 0.1.1)"
echo "2) minor (0.1.0 -> 0.2.0)"
echo "3) major (0.1.0 -> 1.0.0)"
echo "4) custom version"

read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): " release_type

case $release_type in
    1)
        version_type="patch"
        ;;
    2)
        version_type="minor"
        ;;
    3)
        version_type="major"
        ;;
    4)
        read -p "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0.0): " custom_version
        version_type="$custom_version"
        ;;
    *)
        echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
        exit 1
        ;;
esac

echo -e "${BLUE}üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...${NC}"
npm ci

echo -e "${BLUE}üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...${NC}"
npm run test:unit
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏${NC}"
    exit 1
fi

echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã...${NC}"
npm run type-check
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤${NC}"
    exit 1
fi

echo -e "${BLUE}üßπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–Ω—Ç–µ—Ä...${NC}"
npm run lint
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞${NC}"
    exit 1
fi

echo -e "${BLUE}üèóÔ∏è –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç...${NC}"
npm run build:lib
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏${NC}"
    exit 1
fi

# –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
if [ "$release_type" = "4" ]; then
    npm version "$custom_version" --no-git-tag-version
else
    npm version "$version_type" --no-git-tag-version
fi

new_version=$(node -p "require('./package.json').version")
echo -e "${GREEN}‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ: ${new_version}${NC}"

# –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
git add package.json package-lock.json
git commit -m "chore: bump version to $new_version"

# –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
git tag "v$new_version"

echo -e "${YELLOW}üì§ –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ GitHub...${NC}"
git push origin main
git push origin "v$new_version"

echo -e "${GREEN}‚úÖ –ì–æ—Ç–æ–≤–æ!${NC}"
echo -e "${BLUE}üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://github.com/vpavlov-me/reluna-ui/releases"
echo "2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–ª–∏–∑ —Å —Ç–µ–≥–æ–º v$new_version"
echo "3. GitHub Action –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫—É–µ—Ç –ø–∞–∫–µ—Ç –Ω–∞ npm"
echo ""
echo -e "${BLUE}üåê –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:${NC}"
echo "npm install @reluna/ui@$new_version" 